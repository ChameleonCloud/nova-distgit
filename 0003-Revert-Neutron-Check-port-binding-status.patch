From 30bdc201aff347375c55881688fb7c25f16b8276 Mon Sep 17 00:00:00 2001
From: Pierre Riteau <priteau@uchicago.edu>
Date: Thu, 14 Jan 2016 18:48:06 +0000
Subject: [PATCH 3/3] Revert "Neutron: Check port binding status"

This reverts commit 7fc38d0c8498f73f6502520fee99158d130bbfc3.
---
 nova/exception.py                         |  5 ---
 nova/network/model.py                     |  1 -
 nova/network/neutronv2/api.py             | 14 +--------
 nova/tests/unit/network/test_neutronv2.py | 52 -------------------------------
 4 files changed, 1 insertion(+), 71 deletions(-)

diff --git a/nova/exception.py b/nova/exception.py
index 1108c14..8e33d96 100644
--- a/nova/exception.py
+++ b/nova/exception.py
@@ -782,11 +782,6 @@ class PortNotFree(Invalid):
     msg_fmt = _("No free port available for instance %(instance)s.")
 
 
-class PortBindingFailed(Invalid):
-    msg_fmt = _("Binding failed for port %(port_id)s, please check neutron "
-                "logs for more information.")
-
-
 class FixedIpExists(NovaException):
     msg_fmt = _("Fixed ip %(address)s already exists.")
 
diff --git a/nova/network/model.py b/nova/network/model.py
index c7376f8..f6ecbac 100644
--- a/nova/network/model.py
+++ b/nova/network/model.py
@@ -45,7 +45,6 @@ VIF_TYPE_VROUTER = 'vrouter'
 VIF_TYPE_OTHER = 'other'
 VIF_TYPE_TAP = 'tap'
 VIF_TYPE_MACVTAP = 'macvtap'
-VIF_TYPE_BINDING_FAILED = 'binding_failed'
 
 # Constants for dictionary keys in the 'vif_details' field in the VIF
 # class
diff --git a/nova/network/neutronv2/api.py b/nova/network/neutronv2/api.py
index ec1174b..d6f08ae 100644
--- a/nova/network/neutronv2/api.py
+++ b/nova/network/neutronv2/api.py
@@ -315,7 +315,6 @@ class API(base_api.NetworkAPI):
         :raises PortLimitExceeded: If neutron fails with an OverQuota error.
         :raises NoMoreFixedIps: If neutron fails with
             IpAddressGenerationFailure error.
-        :raises: PortBindingFailed: If port binding failed.
         """
         try:
             if fixed_ip:
@@ -334,12 +333,7 @@ class API(base_api.NetworkAPI):
                 port_req_body['port']['mac_address'] = mac_address
             if dhcp_opts is not None:
                 port_req_body['port']['extra_dhcp_opts'] = dhcp_opts
-            port = port_client.create_port(port_req_body)
-            port_id = port['port']['id']
-            if (port['port'].get('binding:vif_type') ==
-                network_model.VIF_TYPE_BINDING_FAILED):
-                port_client.delete_port(port_id)
-                raise exception.PortBindingFailed(port_id=port_id)
+            port_id = port_client.create_port(port_req_body)['port']['id']
             LOG.debug('Successfully created port: %s', port_id,
                       instance=instance)
             return port_id
@@ -488,12 +482,6 @@ class API(base_api.NetworkAPI):
                     if port.get('device_id'):
                         raise exception.PortInUse(port_id=request.port_id)
 
-                    # Make sure the port is usable
-                    if (port.get('binding:vif_type') ==
-                        network_model.VIF_TYPE_BINDING_FAILED):
-                        raise exception.PortBindingFailed(
-                            port_id=request.port_id)
-
                     if hypervisor_macs is not None:
                         if port['mac_address'] not in hypervisor_macs:
                             LOG.debug("Port %(port)s mac address %(mac)s is "
diff --git a/nova/tests/unit/network/test_neutronv2.py b/nova/tests/unit/network/test_neutronv2.py
index c6f9c13..e5235fa 100644
--- a/nova/tests/unit/network/test_neutronv2.py
+++ b/nova/tests/unit/network/test_neutronv2.py
@@ -3509,58 +3509,6 @@ class TestNeutronv2WithMock(test.TestCase):
         mock_unbind.assert_called_once_with(mock.sentinel.ctx, ['2'],
                                             mock_client)
 
-    @mock.patch('nova.network.neutronv2.api.API.'
-                '_check_external_network_attach')
-    @mock.patch('nova.network.neutronv2.api.API._has_port_binding_extension')
-    @mock.patch('nova.network.neutronv2.api.API.'
-                '_populate_neutron_extension_values')
-    @mock.patch('nova.network.neutronv2.api.API._get_available_networks')
-    @mock.patch('nova.network.neutronv2.api.get_client')
-    def test_port_binding_failed_created_port(self, mock_ntrn,
-                                          mock_avail_nets,
-                                          mock_ext_vals,
-                                          mock_has_pbe,
-                                          mock_cena):
-        mock_has_pbe.return_value = True
-        mock_nc = mock.Mock()
-        mock_ntrn.return_value = mock_nc
-        mock_inst = mock.Mock(project_id="proj-1",
-                              availability_zone='zone-1',
-                              uuid='inst-1')
-        mock_avail_nets.return_value = [{'id': 'net-1'}]
-        mock_nc.create_port.return_value = {'port': {'id': 'fake_id',
-                            'tenant_id': mock_inst.project_id,
-                            'binding:vif_type': 'binding_failed'}}
-
-        self.assertRaises(exception.PortBindingFailed,
-                          self.api.allocate_for_instance,
-                          mock.sentinel.ctx,
-                          mock_inst)
-        mock_nc.delete_port.assert_called_once_with('fake_id')
-
-    @mock.patch('nova.network.neutronv2.api.API._show_port')
-    @mock.patch('nova.network.neutronv2.api.API._has_port_binding_extension')
-    @mock.patch('nova.network.neutronv2.api.get_client')
-    def test_port_binding_failed_with_request(self, mock_ntrn,
-                                          mock_has_pbe,
-                                          mock_show_port):
-        mock_has_pbe.return_value = True
-        mock_nc = mock.Mock()
-        mock_ntrn.return_value = mock_nc
-        mock_inst = mock.Mock(project_id="proj-1",
-                              availability_zone='zone-1',
-                              uuid='inst-1')
-        mock_show_port.return_value = {
-                            'tenant_id': mock_inst.project_id,
-                            'binding:vif_type': 'binding_failed'}
-        nw_req = objects.NetworkRequestList(
-            objects = [objects.NetworkRequest(port_id='fake_id')])
-
-        self.assertRaises(exception.PortBindingFailed,
-                          self.api.allocate_for_instance,
-                          mock.sentinel.ctx, mock_inst,
-                          requested_networks=nw_req)
-
 
 class TestNeutronv2ModuleMethods(test.NoDBTestCase):
 
-- 
2.7.0

